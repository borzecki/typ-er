{"version":3,"sources":["hooks/useKeyPress.tsx","components/TextEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["functionKeys","useKeyPress","useState","keyPressed","setKeyPressed","downHandler","key","indexOf","upHandler","useEffect","window","addEventListener","removeEventListener","Letter","char","state","className","classnames","space","TextEditor","text","resetTimer","increaseErrors","onComplete","currentIndex","setIndex","Set","failed","setFailed","length","has","add","getState","index","current","success","unused","map","Analysis","wpm","errors","App","setText","Date","getTime","started","setStarted","setWPM","setErrors","seconds","value","Math","round","fetch","then","response","json","result","replace","toLowerCase","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ab65b84.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst functionKeys = [\n  \"Shift\",\n  \"Control\",\n  \"Meta\",\n  \"CapsLock\",\n  \"Alt\",\n  \"Backspace\",\n  \"Escape\",\n];\n\nfunction useKeyPress() {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(\"\");\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }: { key: string }) {\n    if (functionKeys.indexOf(key) === -1) setKeyPressed(key);\n  }\n\n  // // If released key is our target key then set to false\n  const upHandler = () => {\n    setKeyPressed(\"\");\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import React, { useState, useEffect } from \"react\";\nimport classnames from \"classnames\";\n\nimport useKeyPress from \"../hooks/useKeyPress\";\n\nconst Letter = ({ char, state }: { char: string; state: any }) => (\n  <span className={classnames(state, { space: char === \" \" })}>{char}</span>\n);\n\nconst TextEditor = ({\n  text,\n  resetTimer,\n  increaseErrors,\n  onComplete,\n}: {\n  text: string;\n  resetTimer?: () => void;\n  increaseErrors?: () => void;\n  onComplete: () => void;\n}) => {\n  const key = useKeyPress();\n  const [currentIndex, setIndex] = useState(0);\n  const [failed, setFailed] = useState<Set<number>>(new Set([]));\n\n  useEffect(() => {\n    if (currentIndex === text.length) {\n      onComplete();\n      setFailed(new Set());\n      setIndex(0);\n    }\n    if (key === \"\") return;\n\n    // reset timer when first character is typed\n    if (currentIndex === 0 && !failed.has(currentIndex) && resetTimer)\n      resetTimer();\n\n    if (key === text[currentIndex]) {\n      setIndex(currentIndex + 1);\n    } else {\n      failed.add(currentIndex);\n      setFailed(failed);\n      increaseErrors && increaseErrors();\n    }\n    // eslint-disable-next-line\n  }, [key]);\n\n  const getState = (index: number) => {\n    return {\n      current: index === currentIndex,\n      failed: failed.has(index),\n      success: index < currentIndex && !failed.has(index),\n      unused: index > currentIndex,\n    };\n  };\n\n  return (\n    <div className=\"editor\">\n      {[...text].map((char, index) => (\n        <Letter key={index} char={char} state={getState(index)} />\n      ))}\n    </div>\n  );\n};\n\nexport default TextEditor;\n","import React, { useState } from \"react\";\nimport TextEditor from \"./components/TextEditor\";\n\nimport \"./App.css\";\n\nconst Analysis = ({ wpm, errors }: { wpm: any; errors: any }) => (\n  <>\n    <div className=\"score\">{wpm}</div>\n    <div className=\"errors\">{errors > 0 && errors}</div>\n  </>\n);\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [started, setStarted] = useState(new Date().getTime());\n  const [wpm, setWPM] = useState<number>();\n  const [errors, setErrors] = useState<number>(0);\n\n  const fetchNew = () => {\n    const seconds = (new Date().getTime() - started) / 1000;\n    const value = Math.round((text.length / 5 / seconds) * 60);\n    if (text) setWPM(value);\n    fetch(\n      `https://hipsum.co/api/?type=hipster-centric&sentences=1&_rand=${new Date().getTime()}`\n    )\n      .then((response) => response.json())\n      .then(([result]) =>\n        setText(result.replace(/[.,&--+\\d']/g, \"\").toLowerCase())\n      );\n  };\n  return (\n    <>\n      <Analysis wpm={wpm} errors={errors} />\n      <TextEditor\n        text={text}\n        resetTimer={() => setStarted(new Date().getTime())}\n        onComplete={fetchNew}\n        increaseErrors={() => setErrors(errors + 1)}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}